DROP TABLE If EXISTS user_talk_diff_external;
CREATE EXTERNAL TABLE user_talk_diff_external (
    rev_comment STRING,
    insertion STRING,
    insert_only STRING,
    rev_id STRING,
    page_id STRING,
    page_title STRING,
    rev_timestamp STRING,
    user_id STRING,
    user_text STRING
)
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n' 
STORED AS TEXTFILE
LOCATION '/user/ellery/user_talk_diffs_tsv';


DROP TABLE If EXISTS article_talk_diff_external;
CREATE EXTERNAL TABLE article_talk_diff_external (
    rev_comment STRING,
    insertion STRING,
    insert_only STRING,
    rev_id STRING,
    page_id STRING,
    page_title STRING,
    rev_timestamp STRING,
    user_id STRING,
    user_text STRING
) ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n' 
STORED AS TEXTFILE
LOCATION '/user/ellery/article_talk_diffs_tsv';




# Repartitioning the data to be in chunks of 100MB
SET mapreduce.job.queuename=priority;
SET mapreduce.input.fileinputformat.split.maxsize=100000000;
SET mapreduce.input.fileinputformat.split.minsize=100000000;
SET hive.exec.max.dynamic.partitions.pernode=250;
SET hive.exec.dynamic.partition.mode=nonstrict;


DROP TABLE IF EXISTS talk_diff;
CREATE EXTERNAL TABLE talk_diff (
    rev_comment STRING,
    insertion STRING,
    insert_only STRING,
    rev_id STRING,
    page_id STRING,
    page_title STRING,
    rev_timestamp STRING,
    user_id STRING,
    user_text STRING
)
PARTITIONED BY (ns STRING, year STRING)
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n' 
STORED AS TEXTFILE;


INSERT OVERWRITE TABLE talk_diff
PARTITION (ns='user', year)
SELECT
    rev_comment,
    SUBSTRING(insertion, 0, 5000) as insertion,
    insert_only,
    rev_id,
    page_id,
    page_title,
    rev_timestamp,
    user_id,
    user_text,
    SUBSTRING(rev_timestamp, 1, 4) as year
FROM
  user_talk_diff_external;

INSERT OVERWRITE TABLE talk_diff
PARTITION (ns='article', year)
SELECT
    rev_comment,
    SUBSTRING(insertion, 0, 5000) as insertion,
    insert_only,
    rev_id,
    page_id,
    page_title,
    rev_timestamp,
    user_id,
    user_text,
    SUBSTRING(rev_timestamp, 1, 4) as year
FROM
  article_talk_diff_external;


select ns, year, count(*) from talk_diff where ns in ('article', 'user') group by ns, year;

DROP TABLE IF EXISTS talk_diff_no_bot;
CREATE TABLE talk_diff_no_bot (
    rev_comment STRING,
    insertion STRING,
    insert_only STRING,
    rev_id STRING,
    page_id STRING,
    page_title STRING,
    rev_timestamp STRING,
    user_id STRING,
    user_text STRING
)
PARTITIONED BY (ns STRING, year STRING)
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n' 
STORED AS TEXTFILE;


INSERT OVERWRITE TABLE talk_diff_no_bot
PARTITION (ns, year)
SELECT
    t.*
FROM
  talk_diff t
WHERE
    ns RLIKE '.*'
    AND user_text != 'MediaWiki message delivery'
    AND user_text != 'Maintenance script'
    AND user_text NOT RLIKE 'bot|Bot|BOT';


select ns, year, count(*) from talk_diff_no_bot where ns in ('article', 'user') group by ns, year;


DROP TABLE IF EXISTS talk_diff_no_admin;
CREATE TABLE talk_diff_no_admin (
    rev_comment STRING,
    insertion STRING,
    insert_only STRING,
    rev_id STRING,
    page_id STRING,
    page_title STRING,
    rev_timestamp STRING,
    user_id STRING,
    user_text STRING
)
PARTITIONED BY (ns STRING, year STRING)
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n' 
STORED AS TEXTFILE;



INSERT OVERWRITE TABLE talk_diff_no_admin
PARTITION (ns='user', year)
SELECT
    rev_comment,
    insertion,
    insert_only,
    rev_id,
    page_id,
    page_title,
    rev_timestamp,
    user_id,
    user_text,
    year
FROM
  talk_diff_no_bot
WHERE
    ns = 'user'
    AND insertion NOT RLIKE '\\[\\[Image:Octagon-warning'
    AND insertion NOT RLIKE '\\[\\[Image:Stop'
    AND insertion NOT RLIKE '\\[\\[Image:Information.'
    AND insertion NOT RLIKE '\\[\\[Image:Copyright-problem'
    AND insertion NOT RLIKE '\\[\\[Image:Ambox'
    AND insertion NOT RLIKE '\\[\\[Image:Broom'
    AND insertion NOT RLIKE '\\[\\[File:Information'
    AND insertion NOT RLIKE '\\[\\[File:AFC-Logo_Decline'
    AND insertion NOT RLIKE '\\[\\[File:Ambox'
    AND insertion NOT RLIKE '\\[\\[File:Nuvola'
    AND insertion NOT RLIKE '\\[\\[File:Stop'
    AND insertion NOT RLIKE '\\[\\[File:Copyright-problem'
    AND insertion NOT RLIKE '\\|alt=Warning icon\\]\\]'
    AND insertion NOT RLIKE 'The article .* has been \\[\\[Wikipedia:Proposed deletion\\|proposed for deletion\\]\\]'
    AND insertion NOT RLIKE 'Your submission at \\[\\[Wikipedia:Articles for creation\\|Articles for creation\\]\\]'
    AND insertion NOT RLIKE 'A file that you uploaded or altered, .*, has been listed at \\[\\[Wikipedia:Possibly unfree files\\]\\]'
    AND insertion NOT RLIKE 'User:SuggestBot'
    AND insertion NOT RLIKE '\\[\\[Wikipedia:Criteria for speedy deletion\\|Speedy deletion\\]\\] nomination of'
    AND insertion NOT RLIKE 'Please stop your \\[\\[Wikipedia:Disruptive editing\\|disruptive editing\\]\\]. If you continue to \\[\\[Wikipedia:Vandalism\\|vandalize\\]\\] Wikipedia, as you did to .*, you may be \\[\\[Wikipedia:Blocking policy\\|blocked from editing\\]\\]'
    AND insertion NOT RLIKE 'Hello.*and.*\\[\\[Project:Introduction\\|welcome\\]\\].* to Wikipedia!'
    AND insertion NOT RLIKE 'Nomination of .* for deletion'
    AND insertion NOT RLIKE '== Speedy deletion nomination of'
    AND insertion NOT RLIKE '==.*Welcome.*=='
    AND insertion NOT RLIKE "==.*You're invited!.*=="
    AND insertion NOT RLIKE '== 5 Million: We celebrate your contribution =='
    AND insertion NOT RLIKE '==.*listed for discussion =='
    AND insertion NOT RLIKE 'This account has been renamed as part of single-user login finalisation'
    AND insertion NOT RLIKE 'This Month in GLAM'
    AND insertion NOT RLIKE '== Your account will be renamed =='
;


INSERT OVERWRITE TABLE talk_diff_no_admin
PARTITION (ns='article', year)
SELECT
    rev_comment,
    insertion,
    insert_only,
    rev_id,
    page_id,
    page_title,
    rev_timestamp,
    user_id,
    user_text,
    year
FROM
  talk_diff_no_bot
WHERE
    ns = 'article';



DROP TABLE IF EXISTS block_events;
CREATE TABLE block_events
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n' 
STORED AS TEXTFILE
AS SELECT 
  REGEXP_REPLACE(REGEXP_REPLACE(log_title, '_', ' '), 'User:', '')  as user_text,
  log_comment AS reason,
  log_timestamp AS timestamp,
  log_params AS params
FROM enwiki.logging 
WHERE
  log_type = 'block'
  AND log_action in ('block', 'reblock')
  AND LOWER(log_comment) RLIKE 'harassment|personal attack';


DROP TABLE IF EXISTS blocked_user;
CREATE TABLE blocked_user
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n' 
STORED AS TEXTFILE
AS SELECT 
  REGEXP_REPLACE(REGEXP_REPLACE(log_title, '_', ' '), 'User:', '')  as user_text,
  CONCAT_WS('PIPE', COLLECT_LIST(log_comment)) as reasons,
  CONCAT_WS('PIPE', COLLECT_LIST(log_timestamp)) timestamps,
  CONCAT_WS('PIPE', COLLECT_LIST(log_action)) actions,
  CONCAT_WS('PIPE', COLLECT_LIST(log_params)) params
FROM enwiki.logging 
WHERE
  log_type = 'block'
  AND LOWER(log_comment) RLIKE 'harassment|personal attack'
  AND log_action in ('block', 'reblock')
GROUP BY log_title;



DROP TABLE IF EXISTS blocked_talk_diff_no_admin;
CREATE TABLE blocked_talk_diff_no_admin (
    rev_comment STRING,
    insertion STRING,
    insert_only STRING,
    rev_id STRING,
    page_id STRING,
    page_title STRING,
    rev_timestamp STRING,
    user_id STRING,
    user_text STRING
)
PARTITIONED BY (ns STRING, year STRING)
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n' 
STORED AS TEXTFILE;


INSERT OVERWRITE TABLE blocked_talk_diff_no_admin
PARTITION (ns, year)
SELECT
  d.*
FROM
  talk_diff_no_admin d
JOIN
  blocked_user u
ON d.user_text = u.user_text
WHERE ns RLIKE '.*';

select ns, count(*) from blocked_talk_diff_no_admin where ns in ('article', 'user') group by ns;