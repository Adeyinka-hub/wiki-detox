SET mapreduce.job.queuename=priority;

-- daily revision info for all registered users

DROP TABLE IF EXISTS enwiki.daily_revision_counts;
CREATE TABLE enwiki.daily_revision_counts
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n' 
STORED AS TEXTFILE
AS SELECT
  user_id,
  user_text,
  day,
  ns, 
  COUNT(*) AS n_revisions,
  SUM(revision_is_deleted) AS n_deleted_revisions,
  SUM(revision_is_identity_reverted) AS n_identity_reverted_revisions,
  SUM(revision_is_productive) AS n_productive_revisions
FROM (
  SELECT
    event_user_id AS user_id,
    event_user_text AS user_text,
    SUBSTRING(event_timestamp, 1, 8) AS day,
    page_namespace AS ns,
    CAST(revision_is_deleted AS INT) AS revision_is_deleted,
    CAST(revision_is_identity_reverted AS INT) AS revision_is_identity_reverted,
    CAST(revision_is_productive AS INT) AS revision_is_productive
  FROM
    wmf.mediawiki_history
  WHERE
    wiki_db = "enwiki"
    AND event_entity = "revision"
    AND event_user_id != 0
) a
GROUP BY
  user_id,
  user_text,
  day,
  ns;


-- registration dates for users who made at least one edit in any namespace

DROP TABLE IF EXISTS enwiki.user_registration;
CREATE TABLE enwiki.user_registration
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n'
STORED AS TEXTFILE
AS SELECT
 h.user_id,
 h.user_text,
 SUBSTRING(user_creation_timestamp, 1, 8) AS registration_day
FROM
    wmf.mediawiki_history h
JOIN
  (SELECT 
    DISTINCT user_id
  FROM
    enwiki.daily_revision_counts) e
ON h.user_id = e.user_id
WHERE
  wiki_db = "enwiki"
  AND event_entity = "user"
  AND event_type = "create"
  AND user_is_created_by_self
  AND NOT user_is_bot_by_name
  AND NOT user_is_anonymous
  AND user_creation_timestamp IS NOT NULL;


-- first edit dates for users who made at least one edit in any namespace

DROP TABLE IF EXISTS enwiki.user_first_edit;
CREATE TABLE enwiki.user_first_edit
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n'
STORED AS TEXTFILE
AS SELECT
    user_id,
    user_text,
    day as first_edit_day
FROM
  (SELECT
    e.*,
    RANK() OVER  (PARTITION BY user_id ORDER BY day ASC) AS rank 
  FROM
    enwiki.daily_revision_counts e
  ) a
WHERE
  rank == 1
GROUP BY
  user_id,
  user_text,
  day
;


-- get combined table of registration and first edit days

DROP TABLE IF EXISTS enwiki.user_start;
CREATE TABLE enwiki.user_start
ROW FORMAT DELIMITED
  FIELDS TERMINATED BY '\t'
  LINES TERMINATED BY '\n'
STORED AS TEXTFILE
AS SELECT
  r.user_id,
  r.user_text,
  r.registration_day,
  f.first_edit_day
FROM
  enwiki.user_first_edit f
JOIN
  enwiki.user_registration r
ON (f.user_id = r.user_id)
WHERE
  r.registration_day <= f.first_edit_day 
;